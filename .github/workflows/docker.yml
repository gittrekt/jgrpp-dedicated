---
name: Docker Image CI

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  REGISTRY_IMAGE: gittrekt/jgrpp-dedicated

jobs:
  # Get versions
  get_latest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: get versions
        id: get_latest
        run: |
          echo "local_version=$(cat ./RELEASE)" >> $GITHUB_OUTPUT
          echo "latest=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/JGRennison/OpenTTD-patches/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> $GITHUB_OUTPUT
          echo "latest_gfx=$(curl -s -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/OpenTTD/OpenGFX/releases | jq -cMr '([.[]|select(all(.tag_name; contains("beta")|not))])|.[:1]|.[].tag_name')" >> $GITHUB_OUTPUT

    outputs:
      local_version: ${{ steps.get_latest.outputs.local_version }}
      latest: ${{ steps.get_latest.outputs.latest }}
      latest_gfx: ${{ steps.get_latest.outputs.latest_gfx }}

  # Build dedicated server image
  build:
    runs-on: ubuntu-latest
    needs: get_latest
    if: ${{ (needs.get_latest.outputs.latest != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success') }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Prepare platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV  

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout OpenTTD-patches
        uses: actions/checkout@v4
        with:
          repository: 'JGRennison/OpenTTD-patches'
          ref: ${{ needs.get_latest.outputs.latest }}
          path: OpenTTD-patches

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up Qemu
        uses: docker/setup-qemu-action@v3
  
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker registry authentication
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: OPENGFX_VERSION=${{ needs.get_latest.outputs.latest_gfx }}
          pull: true
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge the digests and upload image
  merge:
    runs-on: ubuntu-latest
    needs: [get_latest, build]
    if: ${{ (needs.get_latest.outputs.latest != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY_IMAGE }}:latest \
            -t ${{ env.REGISTRY_IMAGE }}:${{ needs.get_latest.outputs.latest }}  \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  update_repo:        
    runs-on: ubuntu-latest
    needs:  [get_latest, build, merge]
    if: ${{ (needs.get_latest.outputs.latest != needs.get_latest.outputs.local_version) && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo ${{ needs.get_latest.outputs.latest }} > RELEASE
          git config user.name ${{ github.repository_owner }}
          git config user.email ${{ secrets.EMAIL }}
          git add .
          git commit -m "Update RELEASE to ${{ needs.get_latest.outputs.latest }}"
          git push
